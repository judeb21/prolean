/*!
 * template
 * 
 * 
 * @author Ideazhub
 * @version 1.1.0
 * Copyright 2020. MIT licensed.
 */

const $dropdown = $(".dropdown__hover");
const $dropdownToggle = $(".dropdown-toggle");
const $dropdownMenu = $(".dropdown__menu");
const showClass = "show";

$(window).on("load resize", function () {
  if (this.matchMedia("(min-width: 768px)").matches) {
    $dropdown.hover(
      function () {
        const $this = $(this);
        $this.addClass(showClass);
        $this.find($dropdownToggle).attr("aria-expanded", "true");
        $this.find($dropdownMenu).addClass(showClass);
      },
      function () {
        const $this = $(this);
        $this.removeClass(showClass);
        $this.find($dropdownToggle).attr("aria-expanded", "false");
        $this.find($dropdownMenu).removeClass(showClass);
      }
    );
  } else {
    $dropdown.off("mouseenter mouseleave");
  }

});

// $(document).ready(function() {
//   const sidebar = $('.sidebar')
//   const top = window.pageYOffset;
//   console.log(top)
//   const hasChil = $('.has-children');
//   hasChil.mouseenter(function() {
//     console.log()
//   })
// })
window.addEventListener('load', (event) => {


  // modal   
  const closeBtn = document.querySelectorAll(".modal__close")
  const allModalbuttons = document.querySelectorAll('[data-modal]');
  allModalbuttons.forEach(button => {
    button.addEventListener('click', () => {
      const attribute = button.getAttribute('data-modal')
      const modal = document.querySelector(attribute);
      modal.style.display = "block";
      setTimeout(() => {
        modal.classList.add('show')
      }, 100);

      // close all/any modal
      function closeRightModal() {
        closeBtn.forEach(button => {
          button.addEventListener('click', function () {
            modal.classList.remove('show')
            setTimeout(() => {
              modal.style.display = "none";
            }, 500);
          })
        })
      }
      
closeRightModal()
    })
  })

  

  // sidebar
  const sidemnus = document.querySelectorAll('.has-submenu')

  sidemnus.forEach(element => {
    element.addEventListener('mouseenter', function () {
      const distanceTop = window.pageYOffset + element.getBoundingClientRect().top;
      const sideElementWidth = element.offsetWidth
      const distanceLeft = window.pageXOffset + element.getBoundingClientRect().left;
      const newOffset = distanceLeft + (sideElementWidth)
      element.lastElementChild.style.transform = `translate3d(${newOffset}px, ${distanceTop}px, 0)`
    })
  })



  const rightSidebar = document.querySelector(".sidebar-right");
  const morebtn = document.getElementById("more__btn");
  const closeSideBar = document.querySelector(".sidebar__close")

  if (morebtn) {
    morebtn.addEventListener('click', function () {
      rightSidebar.classList.add('show')
    })
  }

  closeSideBar.addEventListener('click', function () {
    rightSidebar.classList.remove('show')
  })


  var x, i, j, l, ll, selElmnt, a, b, c;
  /*look for any elements with the class "customselect":*/
  x = document.getElementsByClassName("customselect");
  l = x.length;
  for (i = 0; i < l; i++) {
    selElmnt = x[i].getElementsByTagName("select")[0];
    ll = selElmnt.length;
    /*for each element, create a new DIV that will act as the selected item:*/
    a = document.createElement("DIV");
    a.setAttribute("class", "select-selected form__input form__input--lg input");
    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
    x[i].appendChild(a);
    /*for each element, create a new DIV that will contain the option list:*/
    b = document.createElement("DIV");
    b.setAttribute("class", "select-items select-hide");
    for (j = 1; j < ll; j++) {
      /*for each option in the original select element,
      create a new DIV that will act as an option item:*/
      c = document.createElement("DIV");
      c.innerHTML = selElmnt.options[j].innerHTML;
      c.addEventListener("click", function (e) {
        /*when an item is clicked, update the original select box,
        and the selected item:*/
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            h.classList.add('active-item')
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
      });
      b.appendChild(c);
    }
    x[i].appendChild(b);
    a.addEventListener("click", function (e) {
      /*when the select box is clicked, close any other select boxes,
      and open/close the current select box:*/
      e.stopPropagation();
      closeAllSelect(this);
      this.nextSibling.classList.toggle("select-hide");
      this.classList.toggle("select-arrow-active");
    });
  }

  function closeAllSelect(elmnt) {
    /*a function that will close all select boxes in the document,
    except the current select box:*/
    var x, y, i, xl, yl, arrNo = [];
    x = document.getElementsByClassName("select-items");
    y = document.getElementsByClassName("select-selected");
    xl = x.length;
    yl = y.length;
    for (i = 0; i < yl; i++) {
      if (elmnt == y[i]) {
        arrNo.push(i)
      } else {
        y[i].classList.remove("select-arrow-active");
      }
    }
    for (i = 0; i < xl; i++) {
      if (arrNo.indexOf(i)) {
        x[i].classList.add("select-hide");
      }
    }
  }
  /*if the user clicks anywhere outside the select box,
  then close all select boxes:*/
  document.addEventListener("click", closeAllSelect);



  const allSaveBtns = document.querySelectorAll('#save-changes');
  const allDeleteBtns = document.querySelectorAll('#delete-items');
  const toaster = document.querySelector('.toaster')
  const child = document.querySelector('.toaster--success')
  const deleteChild = document.querySelector('.toaster--danger')
  const alltoasts = document.querySelectorAll('.toaster__container')
  // child.classList.add('scale')
  // const allOpenToasts = toaster.children
  allSaveBtns.forEach(button => {
    button.addEventListener('click', () => {
      toaster.append(child.cloneNode(true))
      const allOpenModals = document.querySelectorAll('.modal')
      allOpenModals.forEach(modal => {
        modal.classList.remove('show')
            setTimeout(() => {
              modal.style.display = "none";
            }, 500);
      })
      removeChild(toaster.children)
    })
  })

  // allDeleteBtns.forEach(button => {
  //   button.addEventListener('click', () => {
  //     toaster.append(deleteChild.cloneNode(true))
  //     const allOpenModals = document.querySelectorAll('.modal')
  //     allOpenModals.forEach(modal => {
  //       modal.classList.remove('show')
  //           setTimeout(() => {
  //             modal.style.display = "none";
  //           }, 500);
  //     })
  //     removeChild(toaster.children)
  //   })
  // })

  removeOnClick = (e) => {
    e.remove();
    const toasterWrapper = document.querySelector('.toaster')
    removeChild(toasterWrapper.children)
  }

  function removeChild(children) {
    const openToasters = [...children];
    const timer = 3000;
    openToasters.forEach((toaster, index) => {
      const time = timer + (20 * index)
      setTimeout(() => {
        toaster.remove();
      }, time);
    })
  }

  let selectedBranch = [];
  let uniqValues = []
  addBranch = (e) => {
    const selectedval = e.value;
    const str = '<ion-icon name="close-outline" class="ml-2 text--medium"></ion-icon>'
    if (uniqValues.indexOf(selectedval) === -1) {
      const button = document.createElement('button');
      button.setAttribute('type', 'button')
      button.addEventListener('click', () => {
        console.log(uniqValues.filter(item => item !== selectedval))
        uniqValues = uniqValues.filter(item => item !== selectedval)
        selectedBranch = uniqValues;
        if (!uniqValues.length) {
          document.getElementById('branch-area').classList.remove('p-3', 'light-border')
        }
        button.remove();
        document.getElementById('branch-select').selectedIndex = ''
      })
      if (!uniqValues.length) {
        document.getElementById('branch-area').classList.add('p-3', 'light-border')
      }
      button.classList.add('button', 'text--small', 'm-2', 'text--500', 'text--capital', 'text--white', 'button--black', 'd-inline-flex', 'align-items-center', 'btn-tags')
      const text = document.createTextNode(selectedval);
      // button.appendChild(text);
      button.innerHTML = `${selectedval}${str}`;
      document.getElementById('branch-area').appendChild(button)
    } else {
      return;
    }
    selectedBranch.push(selectedval);
    uniqValues = selectedBranch.filter((a, b) => selectedBranch.indexOf(a) === b)
  }

  // const allTags = document.querySelectorAll('btn-tags')

})
